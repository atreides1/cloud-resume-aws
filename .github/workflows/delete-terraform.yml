name: Delete Terraform Created Resources (Manually Triggered)
on: workflow_dispatch

permissions:
  id-token: write
  contents: read

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
  TF_VAR_bucket_name: ${{ vars.TF_VAR_bucket_name }}
  TF_VAR_cname: ${{ vars.TF_VAR_cname }}
  TF_VAR_domain_name: ${{ vars.TF_VAR_domain_name }}
  TF_VAR_dynamodb_table_name: ${{ vars.TF_VAR_dynamodb_table_name }}
  TF_VAR_region: ${{ vars.TF_VAR_region }}
  TF_VAR_route53_hosting_zone_id: ${{ secrets.ROUTE_53_HOSTING_ZONE_ID }}

jobs:
  destroy-terraform:
    name: "Delete AWS Resources via Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM
      
      - name: Copy Terraform Plan from S3
        run: aws s3 cp s3://${AWS_BUCKET_NAME}/${AWS_BUCKET_KEY_NAME} terraform.tfstate

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Destroy resources
        id: destroy
        run: terraform destroy -auto-approve

      - name: Delete old plan file
        if: steps.destroy.outcome == 'success'
        run: aws s3 rm s3://${AWS_BUCKET_NAME}/${AWS_BUCKET_KEY_NAME}

